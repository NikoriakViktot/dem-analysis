import numpy as np
import rasterio
from rasterio.transform import from_origin
from pyproj import Transformer


class QuasigeoidModel:
    def __init__(self, ascii_path, temp_tif="quasigeoid_tmp.tif"):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥–µ–ª—ñ: –∑ ASCII-—Ñ–∞–π–ª—É —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è —Ç–∏–º—á–∞—Å–æ–≤–∏–π GeoTIFF
        """
        self.ascii_path = ascii_path
        self.tif_path = temp_tif
        self.dataset = None

        self._ascii_to_geotiff()
        self._load_geotiff()

    def _ascii_to_geotiff(self):
        with open(self.ascii_path, 'r', encoding='utf-8', errors='ignore') as f:
            lines = f.readlines()

        # üß≠ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—è:
        lat_min, lat_max = map(float, lines[0].strip().split())  # —à–∏—Ä–æ—Ç–∞ (Y)
        lon_min, lon_max = map(float, lines[1].strip().split())  # –¥–æ–≤–≥–æ—Ç–∞ (X)
        lat_step, lon_step = map(float, lines[2].strip().split())

        # –†–æ–∑–º—ñ—Ä–∏ —Å—ñ—Ç–∫–∏
        n_rows = int(round((lat_max - lat_min) / lat_step)) + 1
        n_cols = int(round((lon_max - lon_min) / lon_step)) + 1

        print(f"üìê –†–æ–∑–º—ñ—Ä —Å—ñ—Ç–∫–∏ (—Ä—è–¥–∫–∏ x —Å—Ç–æ–≤–ø—Ü—ñ): {n_rows} x {n_cols}")

        # –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å
        raw_values = " ".join(lines[3:]).split()
        cleaned_values = []
        for v in raw_values:
            try:
                cleaned_values.append(float(v))
            except ValueError:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è: {repr(v)}")
                continue

        flat_array = np.array(cleaned_values)

        if len(flat_array) != n_rows * n_cols:
            raise ValueError(f"‚ùå –û—á—ñ–∫—É–≤–∞–Ω–æ {n_rows * n_cols} –∑–Ω–∞—á–µ–Ω—å, –∞ –æ—Ç—Ä–∏–º–∞–Ω–æ {len(flat_array)}")

        array = flat_array.reshape((n_rows, n_cols))  # –ë–µ–∑ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç—É!

        # üåç –ì–µ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è (–≤–µ—Ä—Ö–Ω—è –ª—ñ–≤–∞ —Ç–æ—á–∫–∞ ‚Äî –ø—ñ–≤–Ω—ñ—á–Ω–∏–π –∑–∞—Ö—ñ–¥)
        transform = from_origin(
            west=lon_min,
            north=lat_max,
            xsize=lon_step,
            ysize=lat_step  # –±–æ –ø—ñ–∫—Å–µ–ª—ñ "–π–¥—É—Ç—å –≤–Ω–∏–∑"
        )

        with rasterio.open(
                self.tif_path, 'w',
                driver='GTiff',
                height=n_rows,
                width=n_cols,
                count=1,
                dtype=array.dtype,
                crs='EPSG:4326',
                transform=transform
        ) as dst:
            dst.write(array, 1)

    def _load_geotiff(self):
        self.dataset = rasterio.open(self.tif_path)

    def get_geoid_height(self, lon, lat, input_crs="EPSG:4326"):
        if input_crs != "EPSG:4326":
            transformer = Transformer.from_crs(input_crs, "EPSG:4326", always_xy=True)
            lon, lat = transformer.transform(lon, lat)
        value = list(self.dataset.sample([(lon, lat)]))[0][0]
        return float(value)

    def get_orthometric_height(self, lon, lat, ellipsoidal_height, input_crs="EPSG:4326"):
        geoid_height = self.get_geoid_height(lon, lat, input_crs=input_crs)
        return ellipsoidal_height - geoid_height
